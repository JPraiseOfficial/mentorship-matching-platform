// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  Admin
  Mentor
  Mentee
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum RequestStatus {
  Pending
  Accepted
  Rejected
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          Role          @default(Mentee)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  profile             Profile?      
  availabilities      Availability[]
  MentorSession       Session[]     @relation("MentorSession")
  MenteeSession       Session[]     @relation("MenteeSession")
}

model Profile {
  id        Int       @id @default(autoincrement())
  name      String
  bio       String
  skills    String
  goals     String
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  MentorRequests      MentorshipRequest[]   @relation("MentorRequests")
  MenteeRequests      MentorshipRequest[]   @relation("MenteeRequests")

}

model Availability {
  id            Int       @id @default(autoincrement())
  mentorId      Int
  day           Day
  startTime     String
  endTime       String
  user          User      @relation(fields: [mentorId], references: [id])
}

model MentorshipRequest {
  id          Int             @id @default(autoincrement())
  mentorId    Int
  menteeId    Int
  status      RequestStatus   @default(Pending)
  createdAt   DateTime        @default(now())

  mentor      Profile    @relation("MentorRequests", fields: [mentorId], references: [userId])
  mentee      Profile    @relation("MenteeRequests", fields: [menteeId], references: [userId])

}

model Session {
  id          Int             @id @default(autoincrement())
  mentorId    Int
  menteeId    Int
  DateTime    DateTime
  feedback    String?
  rating      Int?
  createdAt   DateTime        @default(now())

  mentor      User    @relation("MentorSession", fields: [mentorId], references: [id])
  mentee      User    @relation("MenteeSession", fields: [menteeId], references: [id])

}